generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  email            String?       @unique
  avatar           String?
  name             String?
  password         String?
  role             String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deleted          Boolean       @default(false)
  messages         Message[]
  chats            Chat[]
  RelationPlatform RelationIdp[]
  files            MessageFile[]

  @@map("users")
}

model Idp {
  id               String        @id @default(cuid())
  name             String
  params           Json
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  RelationPlatform RelationIdp[]

  @@map("idp")
}

model RelationIdp {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  idpId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  idp       Idp      @relation(fields: [idpId], references: [id], onDelete: Cascade)

  @@index([userId, idpId])
  @@map("relation_idps")
}

model Assistant {
  id        String   @id @default(cuid())
  name      String
  mode      String
  apiKey    String?
  baseUrl   String?
  prompt    String?
  models    Json
  options   Json?
  webSearch Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chats     Chat[]

  @@map("assistants")
}

model Chat {
  id            String     @id @default(cuid())
  title         String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  lastChatTime  DateTime   @default(now())
  userId        String
  summary       String?
  messageOffset Int        @default(0)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]
  assistantId   String?
  assistant     Assistant? @relation(fields: [assistantId], references: [id])
  public        Boolean    @default(false)
  model         String?
  deleted       Boolean    @default(false)

  @@index([userId])
  @@index([assistantId])
  @@map("chats")
}

model Message {
  id                  String        @id @default(cuid())
  role                String // 'user' | 'assistant' | 'system'
  userId              String
  chatId              String
  context             Json?
  error               String?
  model               String?
  reasoningDuration   Int?
  parts               Json?
  input_tokens        Int?
  output_tokens       Int?
  total_tokens        Int?
  reasoning_tokens    Int?
  cached_input_tokens Int?
  steps               Json?
  terminated          Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat                Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  files               MessageFile[]

  @@index([userId, chatId])
  @@map("messages")
}

model MessageFile {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  path      String
  size      Int
  origin    String // file
  createdAt DateTime @default(now())

  @@index([messageId])
  @@index([userId])
  @@map("message_files")
}
